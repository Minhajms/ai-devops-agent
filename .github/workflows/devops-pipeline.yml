name: AI-Powered DevOps Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist coverage

    - name: Run security checks
      run: |
        bandit -r . -ll
        safety scan --output json > safety-report.json

    - name: Run tests with coverage
      run: |
        pytest -n auto --cov=scripts --cov-report=xml --junitxml=test-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

    - name: Train and validate model
      run: python scripts/train_model.py
      env:
        SMOTE_SAMPLING: 'true'

    - name: Predict Pipeline Risk
      run: python scripts/predict_risk.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-artifacts
        path: |
          test-results.xml
          coverage.xml
          safety-report.json
          models/
          data/risk_predictions.csv

    - name: Notify Slack
      env:
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        CI_STATUS: "${{ job.status }}"
      run: |
        python scripts/notify_slack.py "$CI_STATUS"
